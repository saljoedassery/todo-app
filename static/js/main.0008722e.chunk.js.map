{"version":3,"sources":["images/plus_2.svg","images/list.svg","TodoList.js","TodoInput.js","MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoList","props","todoComplete","index","event","todoList","state","setState","checkedItem","todo","isChecked","className","this","map","task","key","type","checked","onChange","React","Component","TodoInput","keyPress","keyCode","addTodo","target","value","inputVal","inputChange","onKeyDown","placeholder","src","plusIcon2","alt","MainComponent","newTask","push","noTask","length","NoTaskIcon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,2LC6C5BC,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,aAAe,SAACC,EAAOC,GACrB,IAAIC,EAAW,EAAKC,MAAMD,UACC,IAAvBA,EAASF,GAAO,GAAaE,EAASF,GAAO,IAAK,EACjDE,EAASF,GAAO,IAAK,EAC1B,EAAKI,SAAS,CAACF,SAASA,KAXP,EAcnBG,YAAc,SAACC,EAAMC,GACrB,OAAGA,EAAkB,gCAASD,GAClBA,GAdV,EAAKH,MAAQ,CACXD,SAAU,EAAKJ,MAAMI,UAHN,E,qDAoBT,IAAD,OACP,OACE,yBAAKM,UAAU,aACb,yBAAKA,UAAU,gBACb,sCAEDC,KAAKN,MAAMD,SAASQ,KAAI,SAACC,EAAMX,GAAP,OACvB,2BAAOQ,UAAU,YAAYI,IAAKZ,GAC/B,EAAKK,YAAYM,EAAK,GAAIA,EAAK,IAChC,2BACEE,KAAK,WACLC,QAASH,EAAK,GACdI,SAAU,SAACd,GAAD,OAAW,EAAKF,aAAaC,EAAOC,MAEhD,0BAAMO,UAAU,uB,GAnCLQ,IAAMC,W,gBCmCdC,E,kDAjCb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAKRqB,SAAW,SAAAlB,GACa,KAAlBA,EAAMmB,UACR,EAAKtB,MAAMuB,QAAQpB,EAAMqB,OAAOC,OAChC,EAAKnB,SAAS,CAAEoB,SAAU,OATX,EAanBC,YAAc,SAAAxB,GACZ,EAAKG,SAAS,CAAEoB,SAAUvB,EAAMqB,OAAOC,SAZvC,EAAKpB,MAAQ,CACXqB,SAAU,IAHK,E,qDAkBjB,OACE,yBAAKhB,UAAU,cACb,2BACEK,KAAK,OACLa,UAAWjB,KAAKU,SAChBI,MAAOd,KAAKN,MAAMqB,SAClBT,SAAUN,KAAKgB,YACfE,YAAY,gBAEd,yBAAKC,IAAKC,IAAWC,IAAI,mB,GA5BTd,IAAMC,W,gBCqCfc,E,kDAlCb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAMRuB,QAAU,SAAAV,GACR,IAAIT,EAAW,EAAKC,MAAMD,SACtB8B,EAAU,CAACrB,GAAM,GACrBT,EAAS+B,KAAKD,GACd,EAAK5B,SAAS,CAAEF,SAAUA,KAT1B,EAAKC,MAAQ,CACXD,SAAU,IAHK,E,qDAcT,IACJgC,EADG,OAUP,OAPEA,EADiC,IAA/BzB,KAAKN,MAAMD,SAASiC,OACb,yBAAK3B,UAAU,WAAU,yBAAKoB,IAAKQ,IAAYN,IAAI,iBACxD,8CACA,kEAGU,8BAGd,6BACE,kBAAC,EAAD,CAAU5B,SAAUO,KAAKN,MAAMD,WAC/B,kBAAC,EAAD,CAAWmB,QAAS,SAAAV,GAAI,OAAI,EAAKU,QAAQV,MACxCuB,O,GA7BmBlB,IAAMC,WCOnBoB,MARf,WACE,OACE,yBAAK7B,UAAU,aACb,kBAAC,EAAD,QCKc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0008722e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus_2.b7306f80.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.e3c2d53d.svg\";","import React from \"react\";\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: this.props.todoList\n    };\n  }\n\n  todoComplete = (index, event) => {\n    var todoList = this.state.todoList;\n    if (todoList[index][1] === true) todoList[index][1] = false;\n    else todoList[index][1] = true;\n    this.setState({todoList:todoList})\n  };\n\n  checkedItem = (todo, isChecked) => {\n  if(isChecked) return <strike>{todo}</strike>;\n  else return todo;\n\n  }\n\n  render() {\n    return (\n      <div className=\"todo-list\">\n        <div className=\"todo-heading\">\n          <h1>To Do</h1>\n        </div>\n        {this.state.todoList.map((task, index) => (\n          <label className=\"todo-card\" key={index}>\n            {this.checkedItem(task[0], task[1])}\n            <input\n              type=\"checkbox\"\n              checked={task[1]}\n              onChange={(event) => this.todoComplete(index, event)}\n            />\n            <span className=\"checkmark\"></span>\n          </label>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport plusIcon2 from \"./images/plus_2.svg\";\n\nclass TodoInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: \"\"\n    };\n  }\n  keyPress = event => {\n    if (event.keyCode === 13) {\n      this.props.addTodo(event.target.value);\n      this.setState({ inputVal: \"\" });\n    }\n  };\n\n  inputChange = event => {\n    this.setState({ inputVal: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"todo-input\">\n        <input\n          type=\"text\"\n          onKeyDown={this.keyPress}\n          value={this.state.inputVal}\n          onChange={this.inputChange}\n          placeholder=\"New task...\"\n        />\n        <img src={plusIcon2} alt=\"plus icon\" />\n      </div>\n    );\n  }\n}\n\nexport default TodoInput;\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport TodoInput from \"./TodoInput\";\nimport NoTaskIcon from \"./images/list.svg\";\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: []\n    };\n  }\n\n  addTodo = task => {\n    var todoList = this.state.todoList;\n    var newTask = [task, false]\n    todoList.push(newTask);\n    this.setState({ todoList: todoList });\n  };\n\n  render() {\n    var noTask;\n    if (this.state.todoList.length === 0) {\n      noTask = <div className=\"no-task\"><img src={NoTaskIcon} alt=\"no task icon\" />\n          <h3>No tasks found</h3>\n          <p>You can add task using the + above</p>\n        </div>\n      \n    } else noTask = <div></div>;\n\n    return (\n      <div>\n        <TodoList todoList={this.state.todoList} />\n        <TodoInput addTodo={task => this.addTodo(task)} />\n        {noTask}\n      </div>\n    );\n  }\n}\n\nexport default MainComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./MainComponent\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}